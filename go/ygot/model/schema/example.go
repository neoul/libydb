/*
Package schema is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/neoul/go/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
	- yang/example.yang
Imported modules were sourced from:
	- yang/...
*/
package schema

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Example{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Example represents the /example YANG schema element.
type Example struct {
	Company	*Network_Company	`path:"company" module:"network"`
	Country	map[string]*Network_Country	`path:"country" module:"network"`
	Married	YANGEmpty	`path:"married" module:"network"`
	Operator	map[uint32]*Network_Operator	`path:"operator" module:"network"`
	Person	*string	`path:"person" module:"network"`
}

// IsYANGGoStruct ensures that Example implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Example) IsYANGGoStruct() {}

// NewCountry creates a new entry in the Country list of the
// Example struct. The keys of the list are populated from the input
// arguments.
func (t *Example) NewCountry(Name string) (*Network_Country, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Country == nil {
		t.Country = make(map[string]*Network_Country)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Country[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Country", key)
	}

	t.Country[key] = &Network_Country{
		Name: &Name,
	}

	return t.Country[key], nil
}

// NewOperator creates a new entry in the Operator list of the
// Example struct. The keys of the list are populated from the input
// arguments.
func (t *Example) NewOperator(Asn uint32) (*Network_Operator, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Operator == nil {
		t.Operator = make(map[uint32]*Network_Operator)
	}

	key := Asn

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Operator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Operator", key)
	}

	t.Operator[key] = &Network_Operator{
		Asn: &Asn,
	}

	return t.Operator[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Example) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Example"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Example) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Network_Company represents the /network/company YANG schema element.
type Network_Company struct {
	Address	[]string	`path:"address" module:"network"`
	Enumval	E_Network_Company_Enumval	`path:"enumval" module:"network"`
	Name	*string	`path:"name" module:"network"`
}

// IsYANGGoStruct ensures that Network_Company implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Network_Company) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Network_Company) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Network_Company"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Network_Company) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Network_Country represents the /network/country YANG schema element.
type Network_Country struct {
	CountryCode	*string	`path:"country-code" module:"network"`
	DialCode	*uint32	`path:"dial-code" module:"network"`
	Name	*string	`path:"name" module:"network"`
}

// IsYANGGoStruct ensures that Network_Country implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Network_Country) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Network_Country struct, which is a YANG list entry.
func (t *Network_Country) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Network_Country) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Network_Country"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Network_Country) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Network_Operator represents the /network/operator YANG schema element.
type Network_Operator struct {
	Asn	*uint32	`path:"asn" module:"network"`
	Name	*string	`path:"name" module:"network"`
}

// IsYANGGoStruct ensures that Network_Operator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Network_Operator) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Network_Operator struct, which is a YANG list entry.
func (t *Network_Operator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Asn == nil {
		return nil, fmt.Errorf("nil value for key Asn")
	}

	return map[string]interface{}{
		"asn": *t.Asn,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Network_Operator) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Network_Operator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Network_Operator) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_Network_Company_Enumval is a derived int64 type which is used to represent
// the enumerated node Network_Company_Enumval. An additional value named
// Network_Company_Enumval_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Network_Company_Enumval int64

// IsYANGGoEnum ensures that Network_Company_Enumval implements the yang.GoEnum
// interface. This ensures that Network_Company_Enumval can be identified as a
// mapped type for a YANG enumeration.
func (E_Network_Company_Enumval) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Network_Company_Enumval.
func (E_Network_Company_Enumval) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Network_Company_Enumval.
func (e E_Network_Company_Enumval) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Network_Company_Enumval")
}

const (
	// Network_Company_Enumval_UNSET corresponds to the value UNSET of Network_Company_Enumval
	Network_Company_Enumval_UNSET E_Network_Company_Enumval = 0
	// Network_Company_Enumval_enum1 corresponds to the value enum1 of Network_Company_Enumval
	Network_Company_Enumval_enum1 E_Network_Company_Enumval = 1
	// Network_Company_Enumval_enum2 corresponds to the value enum2 of Network_Company_Enumval
	Network_Company_Enumval_enum2 E_Network_Company_Enumval = 2
	// Network_Company_Enumval_enum3 corresponds to the value enum3 of Network_Company_Enumval
	Network_Company_Enumval_enum3 E_Network_Company_Enumval = 31
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Network_Company_Enumval": {
		1: {Name: "enum1"},
		2: {Name: "enum2"},
		31: {Name: "enum3"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xdf, 0x6f, 0xd3, 0x30,
		0x10, 0x7e, 0xcf, 0x5f, 0x11, 0xf9, 0xb9, 0x68, 0xa5, 0x2b, 0x8c, 0xf6, 0xad, 0x6c, 0x9d, 0x90,
		0xc6, 0x36, 0x34, 0x10, 0x2f, 0x08, 0x21, 0x2b, 0xb9, 0x75, 0xd6, 0x12, 0x3b, 0xba, 0x38, 0xac,
		0x15, 0xea, 0xff, 0x8e, 0x52, 0x27, 0x59, 0xd3, 0xd8, 0xae, 0xcb, 0x3a, 0xc1, 0xa8, 0x1f, 0xe7,
		0xfb, 0xdc, 0xfb, 0xf1, 0xdd, 0xd9, 0x5f, 0xac, 0xfd, 0x0a, 0xc2, 0x30, 0x0c, 0xc9, 0x15, 0x4d,
		0x81, 0x8c, 0x43, 0x02, 0x73, 0x9a, 0x66, 0x09, 0x90, 0x9e, 0x5a, 0xbe, 0x60, 0x3c, 0x26, 0xe3,
		0xf0, 0x75, 0xf5, 0xe7, 0xa9, 0xe0, 0xb7, 0x6c, 0x46, 0xc6, 0x61, 0xbf, 0x5a, 0x38, 0x63, 0x48,
		0xc6, 0xa1, 0xfa, 0x8d, 0xd5, 0x42, 0x24, 0xd2, 0x8c, 0xf2, 0x45, 0x6b, 0xb1, 0xe5, 0xa0, 0x06,
		0xf4, 0xda, 0xe6, 0xb6, 0xa3, 0x66, 0x79, 0xd3, 0x61, 0x63, 0xf8, 0x84, 0x70, 0xcb, 0xe6, 0x1d,
		0x37, 0x2d, 0x57, 0x1c, 0xe4, 0x86, 0x9b, 0x95, 0xf9, 0xb3, 0x28, 0x30, 0x02, 0xed, 0x56, 0x15,
		0x0a, 0x2c, 0x1e, 0x04, 0x96, 0xd1, 0x90, 0x4c, 0x79, 0xe9, 0xe9, 0x81, 0x1f, 0x68, 0x3e, 0xc1,
		0x59, 0x91, 0x02, 0x97, 0x64, 0x1c, 0x4a, 0x2c, 0xc0, 0x00, 0x5c, 0x43, 0xad, 0x82, 0xea, 0xa0,
		0x96, 0xad, 0x95, 0xe5, 0x46, 0xae, 0x9b, 0x45, 0x6e, 0x0c, 0x34, 0x8e, 0x11, 0xf2, 0xdc, 0x9c,
		0x4a, 0x5d, 0x89, 0x1a, 0x68, 0x88, 0xaf, 0x2a, 0x7e, 0xdf, 0x60, 0x36, 0x91, 0xe0, 0x42, 0x86,
		0x23, 0x29, 0xae, 0xe4, 0xec, 0x4c, 0xd2, 0xce, 0x64, 0xb9, 0x93, 0xa6, 0x27, 0xcf, 0x40, 0x62,
		0xf3, 0xb3, 0x5f, 0x16, 0x19, 0xb8, 0x55, 0x2a, 0x97, 0xc8, 0xf8, 0xcc, 0x56, 0xac, 0x7a, 0x68,
		0xde, 0xed, 0x14, 0xc1, 0x47, 0x96, 0xcb, 0x89, 0x94, 0x68, 0x8f, 0xe2, 0x92, 0xf1, 0x69, 0x02,
		0x65, 0x01, 0xca, 0xfe, 0xe2, 0x45, 0x92, 0x58, 0x02, 0xb9, 0xa4, 0x73, 0x77, 0xf0, 0x35, 0xc6,
		0x80, 0x10, 0xbf, 0x5f, 0x54, 0xd0, 0xc0, 0xad, 0xa8, 0x9a, 0x74, 0x08, 0xf0, 0x22, 0xfd, 0x49,
		0x93, 0xed, 0x03, 0x50, 0x03, 0xfd, 0x00, 0xbc, 0xa0, 0x01, 0x28, 0x49, 0x03, 0xa4, 0x92, 0x09,
		0xee, 0x32, 0x05, 0x43, 0x0b, 0x66, 0xca, 0x8b, 0xb4, 0x74, 0xba, 0x7c, 0x42, 0xb3, 0x71, 0x15,
		0xd6, 0x96, 0x4e, 0x5b, 0xa1, 0x7c, 0x9b, 0x1d, 0xd2, 0x39, 0xbb, 0xe3, 0x75, 0x3e, 0xe1, 0x5c,
		0x48, 0xd5, 0xd5, 0xda, 0x5b, 0x3d, 0x8f, 0xee, 0x20, 0xa5, 0x19, 0x95, 0x77, 0x65, 0x74, 0x47,
		0x1c, 0xe4, 0x83, 0xc0, 0xfb, 0x23, 0xbd, 0x70, 0x52, 0x3b, 0x24, 0x16, 0x91, 0xac, 0xfa, 0x93,
		0x5c, 0xa9, 0x0d, 0x3f, 0x4e, 0xab, 0x0d, 0x81, 0x3e, 0xb4, 0xb5, 0xb0, 0x48, 0x24, 0x0a, 0x2e,
		0xd1, 0xaa, 0xda, 0x14, 0xc0, 0xab, 0xb6, 0xa7, 0xab, 0xb6, 0xaa, 0x96, 0xaf, 0x22, 0x11, 0x3b,
		0x9c, 0x27, 0x2d, 0xb4, 0x3f, 0x57, 0x0e, 0xfb, 0x5c, 0xd1, 0xcc, 0x45, 0xcc, 0x68, 0xe2, 0xd8,
		0x4a, 0x8f, 0x50, 0xdf, 0x47, 0x2f, 0xa8, 0x8f, 0x0a, 0xc6, 0xe5, 0xf1, 0xc0, 0xa1, 0x8f, 0x4e,
		0x2c, 0x90, 0x1b, 0xca, 0x67, 0xe5, 0xaf, 0x7d, 0xb3, 0x26, 0x6b, 0x2f, 0x76, 0xfd, 0x5d, 0xb0,
		0x95, 0x15, 0xc7, 0x86, 0xea, 0xc0, 0xbf, 0xd2, 0xa4, 0x80, 0xee, 0x7d, 0x62, 0xc4, 0x9f, 0x23,
		0x8d, 0xca, 0x7b, 0xf4, 0x8c, 0xcd, 0xd8, 0xea, 0xcb, 0xa3, 0xbf, 0x75, 0xdf, 0xb2, 0xe7, 0x90,
		0x22, 0x9d, 0x3f, 0x7b, 0x8a, 0xc3, 0xd1, 0xe0, 0x19, 0x93, 0x0c, 0xfe, 0xcc, 0xfa, 0xdd, 0xab,
		0x63, 0x7f, 0xfa, 0xfc, 0x65, 0x75, 0x7c, 0x01, 0x0b, 0x43, 0xa3, 0xd8, 0x1f, 0x2e, 0x9c, 0x1e,
		0x2c, 0x9c, 0x1e, 0x2a, 0xec, 0x0f, 0x14, 0x7b, 0x53, 0xf3, 0x3a, 0x41, 0x6d, 0x55, 0xf3, 0x6a,
		0x83, 0x83, 0x9a, 0x4f, 0x29, 0x22, 0x83, 0xd8, 0xac, 0xe6, 0x6b, 0x80, 0x5e, 0xcd, 0xf7, 0xbd,
		0x9a, 0xef, 0xd2, 0x6c, 0x1c, 0x98, 0xc7, 0xd7, 0x8a, 0x34, 0x93, 0x5a, 0x3e, 0xeb, 0xf9, 0x38,
		0x76, 0xa0, 0x4e, 0x64, 0x80, 0x54, 0x0a, 0x34, 0x73, 0xd7, 0x20, 0xfc, 0xa7, 0xd8, 0x1e, 0x1e,
		0xd0, 0x73, 0xee, 0xf0, 0x78, 0x9e, 0x73, 0x7f, 0x65, 0x79, 0xc1, 0xfc, 0x2f, 0x0b, 0xe6, 0xfe,
		0x01, 0x08, 0xe6, 0xc1, 0x68, 0x38, 0x7a, 0x7b, 0x32, 0x18, 0xbd, 0xf1, 0xba, 0xd9, 0x1f, 0x42,
		0x5e, 0x37, 0x1b, 0x74, 0x73, 0xf7, 0xb2, 0xfa, 0xaf, 0x64, 0xb3, 0x41, 0xfd, 0x58, 0x74, 0xf3,
		0x75, 0xbd, 0xc3, 0x41, 0x7d, 0x65, 0x80, 0xb9, 0x26, 0xa0, 0x86, 0xd3, 0xca, 0xee, 0x65, 0xf3,
		0x1e, 0x65, 0xb3, 0x71, 0x4e, 0x0c, 0xf3, 0xb1, 0xc6, 0x5c, 0xb0, 0xe6, 0xd1, 0xd4, 0x50, 0x84,
		0xe5, 0xe7, 0xf4, 0x1e, 0x6e, 0x84, 0xe8, 0x26, 0xba, 0xd9, 0x64, 0x64, 0xdd, 0xd4, 0x6a, 0xa6,
		0x69, 0xf5, 0x5f, 0x31, 0xca, 0x63, 0xb0, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00,
		0xff, 0xff, 0xcb, 0xf5, 0xc2, 0x27, 0x35, 0x23, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/company/enumval": []reflect.Type{
		reflect.TypeOf((E_Network_Company_Enumval)(0)),
	},
}

